/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "CodeRunner_types.h"



const char* CodePizza::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t CodePizza::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t CodePizza::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lanuage);
          this->__isset.lanuage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stdin);
          this->__isset.stdin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CodePizza::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CodePizza");
  xfer += oprot->writeFieldBegin("lanuage", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->lanuage);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stdin", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stdin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* RunResult::ascii_fingerprint = "0B16BE0E889E92C128BB4AF0864A1587";
const uint8_t RunResult::binary_fingerprint[16] = {0x0B,0x16,0xBE,0x0E,0x88,0x9E,0x92,0xC1,0x28,0xBB,0x4A,0xF0,0x86,0x4A,0x15,0x87};

uint32_t RunResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cacheHit);
          this->__isset.cacheHit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stdin);
          this->__isset.stdin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stdout);
          this->__isset.stdout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stderr);
          this->__isset.stderr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->realExecTime);
          this->__isset.realExecTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RunResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RunResult");
  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cacheHit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->cacheHit);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stdin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->stdin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stdout", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stdout);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stderr", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->stderr);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->userid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("realExecTime", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->realExecTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


