/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef CodeRunner_TYPES_H
#define CodeRunner_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _CodePizza__isset {
  _CodePizza__isset() : lanuage(false), os(false), code(false), stdin(false) {}
  bool lanuage;
  bool os;
  bool code;
  bool stdin;
} _CodePizza__isset;

class CodePizza {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  CodePizza() : lanuage(""), os(""), code(""), stdin("") {
  }

  virtual ~CodePizza() throw() {}

  std::string lanuage;
  std::string os;
  std::string code;
  std::string stdin;

  _CodePizza__isset __isset;

  void __set_lanuage(const std::string& val) {
    lanuage = val;
  }

  void __set_os(const std::string& val) {
    os = val;
  }

  void __set_code(const std::string& val) {
    code = val;
  }

  void __set_stdin(const std::string& val) {
    stdin = val;
  }

  bool operator == (const CodePizza & rhs) const
  {
    if (!(lanuage == rhs.lanuage))
      return false;
    if (!(os == rhs.os))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(stdin == rhs.stdin))
      return false;
    return true;
  }
  bool operator != (const CodePizza &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CodePizza & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RunResult__isset {
  _RunResult__isset() : ret(false), cacheHit(false), stdin(false), stdout(false), stderr(false), userid(false), realExecTime(false), timestamp(false) {}
  bool ret;
  bool cacheHit;
  bool stdin;
  bool stdout;
  bool stderr;
  bool userid;
  bool realExecTime;
  bool timestamp;
} _RunResult__isset;

class RunResult {
 public:

  static const char* ascii_fingerprint; // = "0B16BE0E889E92C128BB4AF0864A1587";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x16,0xBE,0x0E,0x88,0x9E,0x92,0xC1,0x28,0xBB,0x4A,0xF0,0x86,0x4A,0x15,0x87};

  RunResult() : ret(0), cacheHit(0), stdin(""), stdout(""), stderr(""), userid(0), realExecTime(0), timestamp(0) {
  }

  virtual ~RunResult() throw() {}

  int32_t ret;
  int32_t cacheHit;
  std::string stdin;
  std::string stdout;
  std::string stderr;
  int32_t userid;
  int32_t realExecTime;
  int32_t timestamp;

  _RunResult__isset __isset;

  void __set_ret(const int32_t val) {
    ret = val;
  }

  void __set_cacheHit(const int32_t val) {
    cacheHit = val;
  }

  void __set_stdin(const std::string& val) {
    stdin = val;
  }

  void __set_stdout(const std::string& val) {
    stdout = val;
  }

  void __set_stderr(const std::string& val) {
    stderr = val;
  }

  void __set_userid(const int32_t val) {
    userid = val;
  }

  void __set_realExecTime(const int32_t val) {
    realExecTime = val;
  }

  void __set_timestamp(const int32_t val) {
    timestamp = val;
  }

  bool operator == (const RunResult & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(cacheHit == rhs.cacheHit))
      return false;
    if (!(stdin == rhs.stdin))
      return false;
    if (!(stdout == rhs.stdout))
      return false;
    if (!(stderr == rhs.stderr))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(realExecTime == rhs.realExecTime))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const RunResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RunResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
